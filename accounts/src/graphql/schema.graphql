extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.4", 
    import: ["@key", "@extends", "@external"]
  )
  
 """
  An account is a unique user.
  """
  type Account {
    "The unique ID associated with the account."
    id: ID!
    "The email associated with the account (must be unique)."
    email: String!
    "The date and time the account was created."
    createdAt: String!
  }

  # INPUTS

  """
  Provides data to create a new account.
  """
  input CreateAccountInput {
    "The new account's email (must be unique)."
    email: String!
    "The new account's password."
    password: String!
  }

  """
  Provides data to update an existing account's email.
  """
  input UpdateAccountEmailInput {
    "The unique ID associated with the account."
    id: ID!
    "The updated account email."
    email: String!
  }

  """
  Provides data to update an existing account's password. A current password and new password are required to update a password.
  """
  input UpdateAccountPasswordInput {
    "The unique ID associated with the account."
    id: ID!
    "The updated account password."
    newPassword: String!
    "The existing account password."
    password: String!
  }

  # ROOT

  type Query {
    "Retrieves a single account by ID."
    account(id: ID!): Account! @private
    "Retrieves a list of accounts."
    accounts: [Account] @private
    "Retrieves the account of the currently logged-in user."
    viewer: Account
  }

  type Mutation {
    "Creates a new account."
    createAccount(input: CreateAccountInput!): Account! @private
    "Deletes an account."
    deleteAccount(id: ID!): Boolean! @private
    "Updates an account's email."
    updateAccountEmail(input: UpdateAccountEmailInput!): Account! @private
      @owner(argumentName: "input.id")
    "Updates an account's password."
    updateAccountPassword(input: UpdateAccountPasswordInput!): Account! @private
      @owner(argumentName: "input.id")
  }

